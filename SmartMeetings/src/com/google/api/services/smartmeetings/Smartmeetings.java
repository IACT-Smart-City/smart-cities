/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-08-07 19:00:49 UTC)
 * on 2013-08-13 at 18:32:26 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.smartmeetings;

/**
 * Service definition for Smartmeetings (v1).
 * 
 * <p>
 * This is an API
 * </p>
 * 
 * <p>
 * For more information about this service, see the <a href=""
 * target="_blank">API Documentation</a>
 * </p>
 * 
 * <p>
 * This service uses {@link SmartmeetingsRequestInitializer} to initialize
 * global parameters via its {@link Builder}.
 * </p>
 * 
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Smartmeetings extends
		com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

	// Note: Leave this static initializer at the top of the file.
	static {
		com.google.api.client.util.Preconditions
				.checkState(
						com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1
								&& com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 14,
						"You are currently running with version %s of google-api-client. "
								+ "You need at least version 1.15 of google-api-client to run version "
								+ "1.15.0-rc of the  library.",
						com.google.api.client.googleapis.GoogleUtils.VERSION);
	}

	/**
	 * The default encoded root URL of the service. This is determined when the
	 * library is generated and normally should not be changed.
	 * 
	 * @since 1.7
	 */
	public static final String DEFAULT_ROOT_URL = "https://smartdiscussions-endpoint.appspot.com/_ah/api/";

	/**
	 * The default encoded service path of the service. This is determined when
	 * the library is generated and normally should not be changed.
	 * 
	 * @since 1.7
	 */
	public static final String DEFAULT_SERVICE_PATH = "smartmeetings/v1/";

	/**
	 * The default encoded base URL of the service. This is determined when the
	 * library is generated and normally should not be changed.
	 */
	public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL
			+ DEFAULT_SERVICE_PATH;

	/**
	 * Constructor.
	 * 
	 * <p>
	 * Use {@link Builder} if you need to specify any of the optional
	 * parameters.
	 * </p>
	 * 
	 * @param transport
	 *            HTTP transport, which should normally be:
	 *            <ul>
	 *            <li>Google App Engine:
	 *            {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}
	 *            </li>
	 *            <li>Android: {@code newCompatibleTransport} from
	 *            {@code com.google.api.client.extensions.android.http.AndroidHttp}
	 *            </li>
	 *            <li>Java:
	 *            {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
	 *            </li>
	 *            </ul>
	 * @param jsonFactory
	 *            JSON factory, which may be:
	 *            <ul>
	 *            <li>Jackson:
	 *            {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
	 *            <li>Google GSON:
	 *            {@code com.google.api.client.json.gson.GsonFactory}</li>
	 *            <li>Android Honeycomb or higher:
	 *            {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}
	 *            </li>
	 *            </ul>
	 * @param httpRequestInitializer
	 *            HTTP request initializer or {@code null} for none
	 * @since 1.7
	 */
	public Smartmeetings(
			final com.google.api.client.http.HttpTransport transport,
			final com.google.api.client.json.JsonFactory jsonFactory,
			final com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
		this(new Builder(transport, jsonFactory, httpRequestInitializer));
	}

	/**
	 * @param builder
	 *            builder
	 */
	Smartmeetings(final Builder builder) {
		super(builder);
	}

	@Override
	protected void initialize(
			final com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest)
			throws java.io.IOException {
		super.initialize(httpClientRequest);
	}

	/**
	 * An accessor for creating requests from the Backend collection.
	 * 
	 * <p>
	 * The typical use is:
	 * </p>
	 * 
	 * <pre>
	 *   {@code Smartmeetings smartmeetings = new Smartmeetings(...);}
	 *   {@code Smartmeetings.Backend.List request = smartmeetings.backend().list(parameters ...)}
	 * </pre>
	 * 
	 * @return the resource collection
	 */
	public Backend backend() {
		return new Backend();
	}

	/**
	 * The "backend" collection of methods.
	 */
	public class Backend {

		/**
		 * Create a request for the method "backend.setPushId".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link SetPushId#execute()} method to invoke the remote operation.
		 * 
		 * @param pushId
		 * @return the request
		 */
		public SetPushId setPushId(final java.lang.String pushId)
				throws java.io.IOException {
			final SetPushId result = new SetPushId(pushId);
			initialize(result);
			return result;
		}

		public class SetPushId extends SmartmeetingsRequest<Void> {

			private static final String REST_PATH = "discussions/setPushId";

			/**
			 * Create a request for the method "backend.setPushId".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link SetPushId#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link SetPushId#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param pushId
			 * @since 1.13
			 */
			protected SetPushId(final java.lang.String pushId) {
				super(Smartmeetings.this, "POST", REST_PATH, null, Void.class);
				this.pushId = com.google.api.client.util.Preconditions
						.checkNotNull(pushId,
								"Required parameter pushId must be specified.");
			}

			@Override
			public SetPushId setAlt(final java.lang.String alt) {
				return (SetPushId) super.setAlt(alt);
			}

			@Override
			public SetPushId setFields(final java.lang.String fields) {
				return (SetPushId) super.setFields(fields);
			}

			@Override
			public SetPushId setKey(final java.lang.String key) {
				return (SetPushId) super.setKey(key);
			}

			@Override
			public SetPushId setOauthToken(final java.lang.String oauthToken) {
				return (SetPushId) super.setOauthToken(oauthToken);
			}

			@Override
			public SetPushId setPrettyPrint(final java.lang.Boolean prettyPrint) {
				return (SetPushId) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public SetPushId setQuotaUser(final java.lang.String quotaUser) {
				return (SetPushId) super.setQuotaUser(quotaUser);
			}

			@Override
			public SetPushId setUserIp(final java.lang.String userIp) {
				return (SetPushId) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String pushId;

			/**

       */
			public java.lang.String getPushId() {
				return pushId;
			}

			public SetPushId setPushId(final java.lang.String pushId) {
				this.pushId = pushId;
				return this;
			}

			@Override
			public SetPushId set(final String parameterName, final Object value) {
				return (SetPushId) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "backend.setUsername".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link SetUsername#execute()} method to invoke the remote operation.
		 * 
		 * @param token
		 * @return the request
		 */
		public SetUsername setUsername(final java.lang.String token)
				throws java.io.IOException {
			final SetUsername result = new SetUsername(token);
			initialize(result);
			return result;
		}

		public class SetUsername
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.UserInfo> {

			private static final String REST_PATH = "discussions/setUserName/{token}";

			/**
			 * Create a request for the method "backend.setUsername".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link SetUsername#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link SetUsername#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param token
			 * @since 1.13
			 */
			protected SetUsername(final java.lang.String token) {
				super(
						Smartmeetings.this,
						"POST",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.UserInfo.class);
				this.token = com.google.api.client.util.Preconditions
						.checkNotNull(token,
								"Required parameter token must be specified.");
			}

			@Override
			public SetUsername setAlt(final java.lang.String alt) {
				return (SetUsername) super.setAlt(alt);
			}

			@Override
			public SetUsername setFields(final java.lang.String fields) {
				return (SetUsername) super.setFields(fields);
			}

			@Override
			public SetUsername setKey(final java.lang.String key) {
				return (SetUsername) super.setKey(key);
			}

			@Override
			public SetUsername setOauthToken(final java.lang.String oauthToken) {
				return (SetUsername) super.setOauthToken(oauthToken);
			}

			@Override
			public SetUsername setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (SetUsername) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public SetUsername setQuotaUser(final java.lang.String quotaUser) {
				return (SetUsername) super.setQuotaUser(quotaUser);
			}

			@Override
			public SetUsername setUserIp(final java.lang.String userIp) {
				return (SetUsername) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String token;

			/**

       */
			public java.lang.String getToken() {
				return token;
			}

			public SetUsername setToken(final java.lang.String token) {
				this.token = token;
				return this;
			}

			@Override
			public SetUsername set(final String parameterName,
					final Object value) {
				return (SetUsername) super.set(parameterName, value);
			}
		}

	}

	/**
	 * An accessor for creating requests from the Discussions collection.
	 * 
	 * <p>
	 * The typical use is:
	 * </p>
	 * 
	 * <pre>
	 *   {@code Smartmeetings smartmeetings = new Smartmeetings(...);}
	 *   {@code Smartmeetings.Discussions.List request = smartmeetings.discussions().list(parameters ...)}
	 * </pre>
	 * 
	 * @return the resource collection
	 */
	public Discussions discussions() {
		return new Discussions();
	}

	/**
	 * The "discussions" collection of methods.
	 */
	public class Discussions {

		/**
		 * Create a request for the method "discussions.getTopicInfo".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetTopicInfo#execute()} method to invoke the remote operation.
		 * 
		 * @param topic
		 * @return the request
		 */
		public GetTopicInfo getTopicInfo(final java.lang.String topic)
				throws java.io.IOException {
			final GetTopicInfo result = new GetTopicInfo(topic);
			initialize(result);
			return result;
		}

		public class GetTopicInfo
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.Discussion> {

			private static final String REST_PATH = "discussions/getTopicInfo";

			/**
			 * Create a request for the method "discussions.getTopicInfo".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetTopicInfo#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link GetTopicInfo#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param topic
			 * @since 1.13
			 */
			protected GetTopicInfo(final java.lang.String topic) {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.Discussion.class);
				this.topic = com.google.api.client.util.Preconditions
						.checkNotNull(topic,
								"Required parameter topic must be specified.");
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetTopicInfo setAlt(final java.lang.String alt) {
				return (GetTopicInfo) super.setAlt(alt);
			}

			@Override
			public GetTopicInfo setFields(final java.lang.String fields) {
				return (GetTopicInfo) super.setFields(fields);
			}

			@Override
			public GetTopicInfo setKey(final java.lang.String key) {
				return (GetTopicInfo) super.setKey(key);
			}

			@Override
			public GetTopicInfo setOauthToken(final java.lang.String oauthToken) {
				return (GetTopicInfo) super.setOauthToken(oauthToken);
			}

			@Override
			public GetTopicInfo setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetTopicInfo) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetTopicInfo setQuotaUser(final java.lang.String quotaUser) {
				return (GetTopicInfo) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetTopicInfo setUserIp(final java.lang.String userIp) {
				return (GetTopicInfo) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String topic;

			/**

       */
			public java.lang.String getTopic() {
				return topic;
			}

			public GetTopicInfo setTopic(final java.lang.String topic) {
				this.topic = topic;
				return this;
			}

			@com.google.api.client.util.Key
			private java.lang.String name;

			/**

       */
			public java.lang.String getName() {
				return name;
			}

			public GetTopicInfo setName(final java.lang.String name) {
				this.name = name;
				return this;
			}

			@Override
			public GetTopicInfo set(final String parameterName,
					final Object value) {
				return (GetTopicInfo) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "discussions.getUserInfo".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetUserInfo#execute()} method to invoke the remote operation.
		 * 
		 * @return the request
		 */
		public GetUserInfo getUserInfo() throws java.io.IOException {
			final GetUserInfo result = new GetUserInfo();
			initialize(result);
			return result;
		}

		public class GetUserInfo
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.UserInfo> {

			private static final String REST_PATH = "discussions/getUserInfo";

			/**
			 * Create a request for the method "discussions.getUserInfo".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetUserInfo#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link GetUserInfo#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @since 1.13
			 */
			protected GetUserInfo() {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.UserInfo.class);
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetUserInfo setAlt(final java.lang.String alt) {
				return (GetUserInfo) super.setAlt(alt);
			}

			@Override
			public GetUserInfo setFields(final java.lang.String fields) {
				return (GetUserInfo) super.setFields(fields);
			}

			@Override
			public GetUserInfo setKey(final java.lang.String key) {
				return (GetUserInfo) super.setKey(key);
			}

			@Override
			public GetUserInfo setOauthToken(final java.lang.String oauthToken) {
				return (GetUserInfo) super.setOauthToken(oauthToken);
			}

			@Override
			public GetUserInfo setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetUserInfo) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetUserInfo setQuotaUser(final java.lang.String quotaUser) {
				return (GetUserInfo) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetUserInfo setUserIp(final java.lang.String userIp) {
				return (GetUserInfo) super.setUserIp(userIp);
			}

			@Override
			public GetUserInfo set(final String parameterName,
					final Object value) {
				return (GetUserInfo) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "discussions.insert".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link Insert#execute()} method to invoke the remote operation.
		 * 
		 * @param content
		 *            the
		 *            {@link com.google.api.services.smartmeetings.model.Post}
		 * @return the request
		 */
		public Insert insert(
				final com.google.api.services.smartmeetings.model.Post content)
				throws java.io.IOException {
			final Insert result = new Insert(content);
			initialize(result);
			return result;
		}

		public class Insert
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.Post> {

			private static final String REST_PATH = "post";

			/**
			 * Create a request for the method "discussions.insert".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link Insert#execute()} method to invoke the remote operation.
			 * <p>
			 * {@link Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param content
			 *            the
			 *            {@link com.google.api.services.smartmeetings.model.Post}
			 * @since 1.13
			 */
			protected Insert(
					final com.google.api.services.smartmeetings.model.Post content) {
				super(Smartmeetings.this, "POST", REST_PATH, content,
						com.google.api.services.smartmeetings.model.Post.class);
			}

			@Override
			public Insert setAlt(final java.lang.String alt) {
				return (Insert) super.setAlt(alt);
			}

			@Override
			public Insert setFields(final java.lang.String fields) {
				return (Insert) super.setFields(fields);
			}

			@Override
			public Insert setKey(final java.lang.String key) {
				return (Insert) super.setKey(key);
			}

			@Override
			public Insert setOauthToken(final java.lang.String oauthToken) {
				return (Insert) super.setOauthToken(oauthToken);
			}

			@Override
			public Insert setPrettyPrint(final java.lang.Boolean prettyPrint) {
				return (Insert) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public Insert setQuotaUser(final java.lang.String quotaUser) {
				return (Insert) super.setQuotaUser(quotaUser);
			}

			@Override
			public Insert setUserIp(final java.lang.String userIp) {
				return (Insert) super.setUserIp(userIp);
			}

			@Override
			public Insert set(final String parameterName, final Object value) {
				return (Insert) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "discussions.list".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link List#execute()} method to invoke the remote operation.
		 * 
		 * @param topic
		 * @return the request
		 */
		public List list(final java.lang.String topic)
				throws java.io.IOException {
			final List result = new List(topic);
			initialize(result);
			return result;
		}

		public class List
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.PostContainerCollection> {

			private static final String REST_PATH = "postcontainer/{topic}";

			/**
			 * Create a request for the method "discussions.list".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link List#execute()} method to invoke the remote operation.
			 * <p>
			 * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param topic
			 * @since 1.13
			 */
			protected List(final java.lang.String topic) {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.PostContainerCollection.class);
				this.topic = com.google.api.client.util.Preconditions
						.checkNotNull(topic,
								"Required parameter topic must be specified.");
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public List setAlt(final java.lang.String alt) {
				return (List) super.setAlt(alt);
			}

			@Override
			public List setFields(final java.lang.String fields) {
				return (List) super.setFields(fields);
			}

			@Override
			public List setKey(final java.lang.String key) {
				return (List) super.setKey(key);
			}

			@Override
			public List setOauthToken(final java.lang.String oauthToken) {
				return (List) super.setOauthToken(oauthToken);
			}

			@Override
			public List setPrettyPrint(final java.lang.Boolean prettyPrint) {
				return (List) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public List setQuotaUser(final java.lang.String quotaUser) {
				return (List) super.setQuotaUser(quotaUser);
			}

			@Override
			public List setUserIp(final java.lang.String userIp) {
				return (List) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String topic;

			/**

       */
			public java.lang.String getTopic() {
				return topic;
			}

			public List setTopic(final java.lang.String topic) {
				this.topic = topic;
				return this;
			}

			@com.google.api.client.util.Key
			private java.lang.String limit;

			/**

       */
			public java.lang.String getLimit() {
				return limit;
			}

			public List setLimit(final java.lang.String limit) {
				this.limit = limit;
				return this;
			}

			@com.google.api.client.util.Key
			private com.google.api.client.util.DateTime older;

			/**

       */
			public com.google.api.client.util.DateTime getOlder() {
				return older;
			}

			public List setOlder(final com.google.api.client.util.DateTime older) {
				this.older = older;
				return this;
			}

			@Override
			public List set(final String parameterName, final Object value) {
				return (List) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "discussions.removeUserTopic".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link RemoveUserTopic#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param topic
		 * @return the request
		 */
		public RemoveUserTopic removeUserTopic(final java.lang.String topic)
				throws java.io.IOException {
			final RemoveUserTopic result = new RemoveUserTopic(topic);
			initialize(result);
			return result;
		}

		public class RemoveUserTopic
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.UserInfo> {

			private static final String REST_PATH = "discussions/removeUserTopic/{topic}";

			/**
			 * Create a request for the method "discussions.removeUserTopic".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link RemoveUserTopic#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link RemoveUserTopic#initialize(com.google.api.client.googleapis.services.Abst ractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param topic
			 * @since 1.13
			 */
			protected RemoveUserTopic(final java.lang.String topic) {
				super(
						Smartmeetings.this,
						"DELETE",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.UserInfo.class);
				this.topic = com.google.api.client.util.Preconditions
						.checkNotNull(topic,
								"Required parameter topic must be specified.");
			}

			@Override
			public RemoveUserTopic setAlt(final java.lang.String alt) {
				return (RemoveUserTopic) super.setAlt(alt);
			}

			@Override
			public RemoveUserTopic setFields(final java.lang.String fields) {
				return (RemoveUserTopic) super.setFields(fields);
			}

			@Override
			public RemoveUserTopic setKey(final java.lang.String key) {
				return (RemoveUserTopic) super.setKey(key);
			}

			@Override
			public RemoveUserTopic setOauthToken(
					final java.lang.String oauthToken) {
				return (RemoveUserTopic) super.setOauthToken(oauthToken);
			}

			@Override
			public RemoveUserTopic setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (RemoveUserTopic) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public RemoveUserTopic setQuotaUser(final java.lang.String quotaUser) {
				return (RemoveUserTopic) super.setQuotaUser(quotaUser);
			}

			@Override
			public RemoveUserTopic setUserIp(final java.lang.String userIp) {
				return (RemoveUserTopic) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String topic;

			/**

       */
			public java.lang.String getTopic() {
				return topic;
			}

			public RemoveUserTopic setTopic(final java.lang.String topic) {
				this.topic = topic;
				return this;
			}

			@Override
			public RemoveUserTopic set(final String parameterName,
					final Object value) {
				return (RemoveUserTopic) super.set(parameterName, value);
			}
		}

	}

	/**
	 * An accessor for creating requests from the Phonesensors collection.
	 * 
	 * <p>
	 * The typical use is:
	 * </p>
	 * 
	 * <pre>
	 *   {@code Smartmeetings smartmeetings = new Smartmeetings(...);}
	 *   {@code Smartmeetings.Phonesensors.List request = smartmeetings.phonesensors().list(parameters ...)}
	 * </pre>
	 * 
	 * @return the resource collection
	 */
	public Phonesensors phonesensors() {
		return new Phonesensors();
	}

	/**
	 * The "phonesensors" collection of methods.
	 */
	public class Phonesensors {

		/**
		 * Create a request for the method "phonesensors.processSensorData".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link ProcessSensorData#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param content
		 *            the
		 *            {@link com.google.api.services.smartmeetings.model.SensorData}
		 * @return the request
		 */
		public ProcessSensorData processSensorData(
				final com.google.api.services.smartmeetings.model.SensorData content)
				throws java.io.IOException {
			final ProcessSensorData result = new ProcessSensorData(content);
			initialize(result);
			return result;
		}

		public class ProcessSensorData extends SmartmeetingsRequest<Void> {

			private static final String REST_PATH = "processSensorData";

			/**
			 * Create a request for the method "phonesensors.processSensorData".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link ProcessSensorData#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link ProcessSensorData#initialize(com.google.api.client.googleapis.services.Ab stractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param content
			 *            the
			 *            {@link com.google.api.services.smartmeetings.model.SensorData}
			 * @since 1.13
			 */
			protected ProcessSensorData(
					final com.google.api.services.smartmeetings.model.SensorData content) {
				super(Smartmeetings.this, "POST", REST_PATH, content,
						Void.class);
			}

			@Override
			public ProcessSensorData setAlt(final java.lang.String alt) {
				return (ProcessSensorData) super.setAlt(alt);
			}

			@Override
			public ProcessSensorData setFields(final java.lang.String fields) {
				return (ProcessSensorData) super.setFields(fields);
			}

			@Override
			public ProcessSensorData setKey(final java.lang.String key) {
				return (ProcessSensorData) super.setKey(key);
			}

			@Override
			public ProcessSensorData setOauthToken(
					final java.lang.String oauthToken) {
				return (ProcessSensorData) super.setOauthToken(oauthToken);
			}

			@Override
			public ProcessSensorData setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (ProcessSensorData) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public ProcessSensorData setQuotaUser(
					final java.lang.String quotaUser) {
				return (ProcessSensorData) super.setQuotaUser(quotaUser);
			}

			@Override
			public ProcessSensorData setUserIp(final java.lang.String userIp) {
				return (ProcessSensorData) super.setUserIp(userIp);
			}

			@Override
			public ProcessSensorData set(final String parameterName,
					final Object value) {
				return (ProcessSensorData) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "phonesensors.setGSNServerAddress".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link SetGSNServerAddress#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param address
		 * @return the request
		 */
		public SetGSNServerAddress setGSNServerAddress(
				final java.lang.String address) throws java.io.IOException {
			final SetGSNServerAddress result = new SetGSNServerAddress(address);
			initialize(result);
			return result;
		}

		public class SetGSNServerAddress
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.ReturnStatus> {

			private static final String REST_PATH = "setGSNServerAddress/{address}";

			/**
			 * Create a request for the method
			 * "phonesensors.setGSNServerAddress".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link SetGSNServerAddress#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link SetGSNServerAddress#initialize(com.google.api.client.googleapis.services. AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param address
			 * @since 1.13
			 */
			protected SetGSNServerAddress(final java.lang.String address) {
				super(
						Smartmeetings.this,
						"POST",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.ReturnStatus.class);
				this.address = com.google.api.client.util.Preconditions
						.checkNotNull(address,
								"Required parameter address must be specified.");
			}

			@Override
			public SetGSNServerAddress setAlt(final java.lang.String alt) {
				return (SetGSNServerAddress) super.setAlt(alt);
			}

			@Override
			public SetGSNServerAddress setFields(final java.lang.String fields) {
				return (SetGSNServerAddress) super.setFields(fields);
			}

			@Override
			public SetGSNServerAddress setKey(final java.lang.String key) {
				return (SetGSNServerAddress) super.setKey(key);
			}

			@Override
			public SetGSNServerAddress setOauthToken(
					final java.lang.String oauthToken) {
				return (SetGSNServerAddress) super.setOauthToken(oauthToken);
			}

			@Override
			public SetGSNServerAddress setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (SetGSNServerAddress) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public SetGSNServerAddress setQuotaUser(
					final java.lang.String quotaUser) {
				return (SetGSNServerAddress) super.setQuotaUser(quotaUser);
			}

			@Override
			public SetGSNServerAddress setUserIp(final java.lang.String userIp) {
				return (SetGSNServerAddress) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String address;

			/**

       */
			public java.lang.String getAddress() {
				return address;
			}

			public SetGSNServerAddress setAddress(final java.lang.String address) {
				this.address = address;
				return this;
			}

			@Override
			public SetGSNServerAddress set(final String parameterName,
					final Object value) {
				return (SetGSNServerAddress) super.set(parameterName, value);
			}
		}

	}

	/**
	 * An accessor for creating requests from the Roommanagement collection.
	 * 
	 * <p>
	 * The typical use is:
	 * </p>
	 * 
	 * <pre>
	 *   {@code Smartmeetings smartmeetings = new Smartmeetings(...);}
	 *   {@code Smartmeetings.Roommanagement.List request = smartmeetings.roommanagement().list(parameters ...)}
	 * </pre>
	 * 
	 * @return the resource collection
	 */
	public Roommanagement roommanagement() {
		return new Roommanagement();
	}

	/**
	 * The "roommanagement" collection of methods.
	 */
	public class Roommanagement {

		/**
		 * Create a request for the method "roommanagement.addReservation".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link AddReservation#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param endDate
		 * @param roomId
		 * @param startDate
		 * @return the request
		 */
		public AddReservation addReservation(
				final com.google.api.client.util.DateTime endDate,
				final java.lang.String roomId,
				final com.google.api.client.util.DateTime startDate)
				throws java.io.IOException {
			final AddReservation result = new AddReservation(endDate, roomId,
					startDate);
			initialize(result);
			return result;
		}

		public class AddReservation
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.ReturnStatus> {

			private static final String REST_PATH = "roommanagement/addReservation";

			/**
			 * Create a request for the method "roommanagement.addReservation".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link AddReservation#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link AddReservation#initialize(com.google.api.client.googleapis.services.Abstr actGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param endDate
			 * @param roomId
			 * @param startDate
			 * @since 1.13
			 */
			protected AddReservation(
					final com.google.api.client.util.DateTime endDate,
					final java.lang.String roomId,
					final com.google.api.client.util.DateTime startDate) {
				super(
						Smartmeetings.this,
						"POST",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.ReturnStatus.class);
				this.endDate = com.google.api.client.util.Preconditions
						.checkNotNull(endDate,
								"Required parameter endDate must be specified.");
				this.roomId = com.google.api.client.util.Preconditions
						.checkNotNull(roomId,
								"Required parameter roomId must be specified.");
				this.startDate = com.google.api.client.util.Preconditions
						.checkNotNull(startDate,
								"Required parameter startDate must be specified.");
			}

			@Override
			public AddReservation setAlt(final java.lang.String alt) {
				return (AddReservation) super.setAlt(alt);
			}

			@Override
			public AddReservation setFields(final java.lang.String fields) {
				return (AddReservation) super.setFields(fields);
			}

			@Override
			public AddReservation setKey(final java.lang.String key) {
				return (AddReservation) super.setKey(key);
			}

			@Override
			public AddReservation setOauthToken(
					final java.lang.String oauthToken) {
				return (AddReservation) super.setOauthToken(oauthToken);
			}

			@Override
			public AddReservation setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (AddReservation) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public AddReservation setQuotaUser(final java.lang.String quotaUser) {
				return (AddReservation) super.setQuotaUser(quotaUser);
			}

			@Override
			public AddReservation setUserIp(final java.lang.String userIp) {
				return (AddReservation) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private com.google.api.client.util.DateTime endDate;

			/**

       */
			public com.google.api.client.util.DateTime getEndDate() {
				return endDate;
			}

			public AddReservation setEndDate(
					final com.google.api.client.util.DateTime endDate) {
				this.endDate = endDate;
				return this;
			}

			@com.google.api.client.util.Key
			private java.lang.String roomId;

			/**

       */
			public java.lang.String getRoomId() {
				return roomId;
			}

			public AddReservation setRoomId(final java.lang.String roomId) {
				this.roomId = roomId;
				return this;
			}

			@com.google.api.client.util.Key
			private com.google.api.client.util.DateTime startDate;

			/**

       */
			public com.google.api.client.util.DateTime getStartDate() {
				return startDate;
			}

			public AddReservation setStartDate(
					final com.google.api.client.util.DateTime startDate) {
				this.startDate = startDate;
				return this;
			}

			@Override
			public AddReservation set(final String parameterName,
					final Object value) {
				return (AddReservation) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.getAllBuildings".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetAllBuildings#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @return the request
		 */
		public GetAllBuildings getAllBuildings() throws java.io.IOException {
			final GetAllBuildings result = new GetAllBuildings();
			initialize(result);
			return result;
		}

		public class GetAllBuildings
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.BuildingCollection> {

			private static final String REST_PATH = "roommanagement/getAllBuildings";

			/**
			 * Create a request for the method "roommanagement.getAllBuildings".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetAllBuildings#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link GetAllBuildings#initialize(com.google.api.client.googleapis.services.Abst ractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @since 1.13
			 */
			protected GetAllBuildings() {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.BuildingCollection.class);
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetAllBuildings setAlt(final java.lang.String alt) {
				return (GetAllBuildings) super.setAlt(alt);
			}

			@Override
			public GetAllBuildings setFields(final java.lang.String fields) {
				return (GetAllBuildings) super.setFields(fields);
			}

			@Override
			public GetAllBuildings setKey(final java.lang.String key) {
				return (GetAllBuildings) super.setKey(key);
			}

			@Override
			public GetAllBuildings setOauthToken(
					final java.lang.String oauthToken) {
				return (GetAllBuildings) super.setOauthToken(oauthToken);
			}

			@Override
			public GetAllBuildings setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetAllBuildings) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetAllBuildings setQuotaUser(final java.lang.String quotaUser) {
				return (GetAllBuildings) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetAllBuildings setUserIp(final java.lang.String userIp) {
				return (GetAllBuildings) super.setUserIp(userIp);
			}

			@Override
			public GetAllBuildings set(final String parameterName,
					final Object value) {
				return (GetAllBuildings) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method
		 * "roommanagement.getAllRoomProperties".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetAllRoomProperties#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @return the request
		 */
		public GetAllRoomProperties getAllRoomProperties()
				throws java.io.IOException {
			final GetAllRoomProperties result = new GetAllRoomProperties();
			initialize(result);
			return result;
		}

		public class GetAllRoomProperties
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.RoomPropertyCollection> {

			private static final String REST_PATH = "roommanagement/getAllRoomProperties";

			/**
			 * Create a request for the method
			 * "roommanagement.getAllRoomProperties".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetAllRoomProperties#execute()} method to invoke the
			 * remote operation.
			 * <p>
			 * {@link 
			 * GetAllRoomProperties#initialize(com.google.api.client.googleapis
			 * .s ervices.AbstractGoogleClientRequest)} must be called to
			 * initialize this instance immediately after invoking the
			 * constructor.
			 * </p>
			 * 
			 * @since 1.13
			 */
			protected GetAllRoomProperties() {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.RoomPropertyCollection.class);
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetAllRoomProperties setAlt(final java.lang.String alt) {
				return (GetAllRoomProperties) super.setAlt(alt);
			}

			@Override
			public GetAllRoomProperties setFields(final java.lang.String fields) {
				return (GetAllRoomProperties) super.setFields(fields);
			}

			@Override
			public GetAllRoomProperties setKey(final java.lang.String key) {
				return (GetAllRoomProperties) super.setKey(key);
			}

			@Override
			public GetAllRoomProperties setOauthToken(
					final java.lang.String oauthToken) {
				return (GetAllRoomProperties) super.setOauthToken(oauthToken);
			}

			@Override
			public GetAllRoomProperties setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetAllRoomProperties) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetAllRoomProperties setQuotaUser(
					final java.lang.String quotaUser) {
				return (GetAllRoomProperties) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetAllRoomProperties setUserIp(final java.lang.String userIp) {
				return (GetAllRoomProperties) super.setUserIp(userIp);
			}

			@Override
			public GetAllRoomProperties set(final String parameterName,
					final Object value) {
				return (GetAllRoomProperties) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.getAllRooms".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetAllRooms#execute()} method to invoke the remote operation.
		 * 
		 * @return the request
		 */
		public GetAllRooms getAllRooms() throws java.io.IOException {
			final GetAllRooms result = new GetAllRooms();
			initialize(result);
			return result;
		}

		public class GetAllRooms
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.RoomCollection> {

			private static final String REST_PATH = "roommanagement/getAllRooms";

			/**
			 * Create a request for the method "roommanagement.getAllRooms".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetAllRooms#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link GetAllRooms#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @since 1.13
			 */
			protected GetAllRooms() {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.RoomCollection.class);
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetAllRooms setAlt(final java.lang.String alt) {
				return (GetAllRooms) super.setAlt(alt);
			}

			@Override
			public GetAllRooms setFields(final java.lang.String fields) {
				return (GetAllRooms) super.setFields(fields);
			}

			@Override
			public GetAllRooms setKey(final java.lang.String key) {
				return (GetAllRooms) super.setKey(key);
			}

			@Override
			public GetAllRooms setOauthToken(final java.lang.String oauthToken) {
				return (GetAllRooms) super.setOauthToken(oauthToken);
			}

			@Override
			public GetAllRooms setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetAllRooms) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetAllRooms setQuotaUser(final java.lang.String quotaUser) {
				return (GetAllRooms) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetAllRooms setUserIp(final java.lang.String userIp) {
				return (GetAllRooms) super.setUserIp(userIp);
			}

			@Override
			public GetAllRooms set(final String parameterName,
					final Object value) {
				return (GetAllRooms) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method
		 * "roommanagement.getAllRoomsOfBuilding".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetAllRoomsOfBuilding#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param buildingID
		 * @return the request
		 */
		public GetAllRoomsOfBuilding getAllRoomsOfBuilding(
				final java.lang.String buildingID) throws java.io.IOException {
			final GetAllRoomsOfBuilding result = new GetAllRoomsOfBuilding(
					buildingID);
			initialize(result);
			return result;
		}

		public class GetAllRoomsOfBuilding
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.RoomCollection> {

			private static final String REST_PATH = "roommanagement/getAllRoomsOfBuilding";

			/**
			 * Create a request for the method
			 * "roommanagement.getAllRoomsOfBuilding".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetAllRoomsOfBuilding#execute()} method to invoke the
			 * remote operation.
			 * <p>
			 * {@link GetAllRoomsOfBuilding#initialize(com.google.api.client.googleapis. services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param buildingID
			 * @since 1.13
			 */
			protected GetAllRoomsOfBuilding(final java.lang.String buildingID) {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.RoomCollection.class);
				this.buildingID = com.google.api.client.util.Preconditions
						.checkNotNull(buildingID,
								"Required parameter buildingID must be specified.");
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetAllRoomsOfBuilding setAlt(final java.lang.String alt) {
				return (GetAllRoomsOfBuilding) super.setAlt(alt);
			}

			@Override
			public GetAllRoomsOfBuilding setFields(final java.lang.String fields) {
				return (GetAllRoomsOfBuilding) super.setFields(fields);
			}

			@Override
			public GetAllRoomsOfBuilding setKey(final java.lang.String key) {
				return (GetAllRoomsOfBuilding) super.setKey(key);
			}

			@Override
			public GetAllRoomsOfBuilding setOauthToken(
					final java.lang.String oauthToken) {
				return (GetAllRoomsOfBuilding) super.setOauthToken(oauthToken);
			}

			@Override
			public GetAllRoomsOfBuilding setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetAllRoomsOfBuilding) super
						.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetAllRoomsOfBuilding setQuotaUser(
					final java.lang.String quotaUser) {
				return (GetAllRoomsOfBuilding) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetAllRoomsOfBuilding setUserIp(final java.lang.String userIp) {
				return (GetAllRoomsOfBuilding) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String buildingID;

			/**

       */
			public java.lang.String getBuildingID() {
				return buildingID;
			}

			public GetAllRoomsOfBuilding setBuildingID(
					final java.lang.String buildingID) {
				this.buildingID = buildingID;
				return this;
			}

			@Override
			public GetAllRoomsOfBuilding set(final String parameterName,
					final Object value) {
				return (GetAllRoomsOfBuilding) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.getPropertiesOfRoom".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetPropertiesOfRoom#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param roomId
		 * @return the request
		 */
		public GetPropertiesOfRoom getPropertiesOfRoom(
				final java.lang.String roomId) throws java.io.IOException {
			final GetPropertiesOfRoom result = new GetPropertiesOfRoom(roomId);
			initialize(result);
			return result;
		}

		public class GetPropertiesOfRoom
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.RoomPropertyCollection> {

			private static final String REST_PATH = "roommanagement/getPropertiesOfRoom";

			/**
			 * Create a request for the method
			 * "roommanagement.getPropertiesOfRoom".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetPropertiesOfRoom#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link GetPropertiesOfRoom#initialize(com.google.api.client.googleapis.services. AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param roomId
			 * @since 1.13
			 */
			protected GetPropertiesOfRoom(final java.lang.String roomId) {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.RoomPropertyCollection.class);
				this.roomId = com.google.api.client.util.Preconditions
						.checkNotNull(roomId,
								"Required parameter roomId must be specified.");
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetPropertiesOfRoom setAlt(final java.lang.String alt) {
				return (GetPropertiesOfRoom) super.setAlt(alt);
			}

			@Override
			public GetPropertiesOfRoom setFields(final java.lang.String fields) {
				return (GetPropertiesOfRoom) super.setFields(fields);
			}

			@Override
			public GetPropertiesOfRoom setKey(final java.lang.String key) {
				return (GetPropertiesOfRoom) super.setKey(key);
			}

			@Override
			public GetPropertiesOfRoom setOauthToken(
					final java.lang.String oauthToken) {
				return (GetPropertiesOfRoom) super.setOauthToken(oauthToken);
			}

			@Override
			public GetPropertiesOfRoom setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetPropertiesOfRoom) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetPropertiesOfRoom setQuotaUser(
					final java.lang.String quotaUser) {
				return (GetPropertiesOfRoom) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetPropertiesOfRoom setUserIp(final java.lang.String userIp) {
				return (GetPropertiesOfRoom) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String roomId;

			/**

       */
			public java.lang.String getRoomId() {
				return roomId;
			}

			public GetPropertiesOfRoom setRoomId(final java.lang.String roomId) {
				this.roomId = roomId;
				return this;
			}

			@Override
			public GetPropertiesOfRoom set(final String parameterName,
					final Object value) {
				return (GetPropertiesOfRoom) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.getReservationById".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetReservationById#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param id
		 * @return the request
		 */
		public GetReservationById getReservationById(final java.lang.String id)
				throws java.io.IOException {
			final GetReservationById result = new GetReservationById(id);
			initialize(result);
			return result;
		}

		public class GetReservationById
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.Reservation> {

			private static final String REST_PATH = "roommanagement/getReservationById";

			/**
			 * Create a request for the method
			 * "roommanagement.getReservationById".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetReservationById#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link GetReservationById#initialize(com.google.api.client.googleapis.services.A bstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param id
			 * @since 1.13
			 */
			protected GetReservationById(final java.lang.String id) {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.Reservation.class);
				this.id = com.google.api.client.util.Preconditions
						.checkNotNull(id,
								"Required parameter id must be specified.");
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetReservationById setAlt(final java.lang.String alt) {
				return (GetReservationById) super.setAlt(alt);
			}

			@Override
			public GetReservationById setFields(final java.lang.String fields) {
				return (GetReservationById) super.setFields(fields);
			}

			@Override
			public GetReservationById setKey(final java.lang.String key) {
				return (GetReservationById) super.setKey(key);
			}

			@Override
			public GetReservationById setOauthToken(
					final java.lang.String oauthToken) {
				return (GetReservationById) super.setOauthToken(oauthToken);
			}

			@Override
			public GetReservationById setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetReservationById) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetReservationById setQuotaUser(
					final java.lang.String quotaUser) {
				return (GetReservationById) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetReservationById setUserIp(final java.lang.String userIp) {
				return (GetReservationById) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String id;

			/**

       */
			public java.lang.String getId() {
				return id;
			}

			public GetReservationById setId(final java.lang.String id) {
				this.id = id;
				return this;
			}

			@Override
			public GetReservationById set(final String parameterName,
					final Object value) {
				return (GetReservationById) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method
		 * "roommanagement.getReservationsOfRoom".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetReservationsOfRoom#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param roomId
		 * @return the request
		 */
		public GetReservationsOfRoom getReservationsOfRoom(
				final java.lang.String roomId) throws java.io.IOException {
			final GetReservationsOfRoom result = new GetReservationsOfRoom(
					roomId);
			initialize(result);
			return result;
		}

		public class GetReservationsOfRoom
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.ReservationCollection> {

			private static final String REST_PATH = "roommanagement/getReservationsOfRoom";

			/**
			 * Create a request for the method
			 * "roommanagement.getReservationsOfRoom".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetReservationsOfRoom#execute()} method to invoke the
			 * remote operation.
			 * <p>
			 * {@link GetReservationsOfRoom#initialize(com.google.api.client.googleapis. services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param roomId
			 * @since 1.13
			 */
			protected GetReservationsOfRoom(final java.lang.String roomId) {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.ReservationCollection.class);
				this.roomId = com.google.api.client.util.Preconditions
						.checkNotNull(roomId,
								"Required parameter roomId must be specified.");
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetReservationsOfRoom setAlt(final java.lang.String alt) {
				return (GetReservationsOfRoom) super.setAlt(alt);
			}

			@Override
			public GetReservationsOfRoom setFields(final java.lang.String fields) {
				return (GetReservationsOfRoom) super.setFields(fields);
			}

			@Override
			public GetReservationsOfRoom setKey(final java.lang.String key) {
				return (GetReservationsOfRoom) super.setKey(key);
			}

			@Override
			public GetReservationsOfRoom setOauthToken(
					final java.lang.String oauthToken) {
				return (GetReservationsOfRoom) super.setOauthToken(oauthToken);
			}

			@Override
			public GetReservationsOfRoom setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetReservationsOfRoom) super
						.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetReservationsOfRoom setQuotaUser(
					final java.lang.String quotaUser) {
				return (GetReservationsOfRoom) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetReservationsOfRoom setUserIp(final java.lang.String userIp) {
				return (GetReservationsOfRoom) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String roomId;

			/**

       */
			public java.lang.String getRoomId() {
				return roomId;
			}

			public GetReservationsOfRoom setRoomId(final java.lang.String roomId) {
				this.roomId = roomId;
				return this;
			}

			@Override
			public GetReservationsOfRoom set(final String parameterName,
					final Object value) {
				return (GetReservationsOfRoom) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method
		 * "roommanagement.getReservationsOfUser".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetReservationsOfUser#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @return the request
		 */
		public GetReservationsOfUser getReservationsOfUser()
				throws java.io.IOException {
			final GetReservationsOfUser result = new GetReservationsOfUser();
			initialize(result);
			return result;
		}

		public class GetReservationsOfUser
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.ReservationCollection> {

			private static final String REST_PATH = "roommanagement/getReservationsOfUser";

			/**
			 * Create a request for the method
			 * "roommanagement.getReservationsOfUser".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetReservationsOfUser#execute()} method to invoke the
			 * remote operation.
			 * <p>
			 * {@link GetReservationsOfUser#initialize(com.google.api.client.googleapis. services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @since 1.13
			 */
			protected GetReservationsOfUser() {
				super(
						Smartmeetings.this,
						"GET",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.ReservationCollection.class);
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetReservationsOfUser setAlt(final java.lang.String alt) {
				return (GetReservationsOfUser) super.setAlt(alt);
			}

			@Override
			public GetReservationsOfUser setFields(final java.lang.String fields) {
				return (GetReservationsOfUser) super.setFields(fields);
			}

			@Override
			public GetReservationsOfUser setKey(final java.lang.String key) {
				return (GetReservationsOfUser) super.setKey(key);
			}

			@Override
			public GetReservationsOfUser setOauthToken(
					final java.lang.String oauthToken) {
				return (GetReservationsOfUser) super.setOauthToken(oauthToken);
			}

			@Override
			public GetReservationsOfUser setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetReservationsOfUser) super
						.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetReservationsOfUser setQuotaUser(
					final java.lang.String quotaUser) {
				return (GetReservationsOfUser) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetReservationsOfUser setUserIp(final java.lang.String userIp) {
				return (GetReservationsOfUser) super.setUserIp(userIp);
			}

			@Override
			public GetReservationsOfUser set(final String parameterName,
					final Object value) {
				return (GetReservationsOfUser) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.getRoomById".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link GetRoomById#execute()} method to invoke the remote operation.
		 * 
		 * @param id
		 * @return the request
		 */
		public GetRoomById getRoomById(final java.lang.String id)
				throws java.io.IOException {
			final GetRoomById result = new GetRoomById(id);
			initialize(result);
			return result;
		}

		public class GetRoomById
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.Room> {

			private static final String REST_PATH = "roommanagement/getRoomById";

			/**
			 * Create a request for the method "roommanagement.getRoomById".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link GetRoomById#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link GetRoomById#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param id
			 * @since 1.13
			 */
			protected GetRoomById(final java.lang.String id) {
				super(Smartmeetings.this, "GET", REST_PATH, null,
						com.google.api.services.smartmeetings.model.Room.class);
				this.id = com.google.api.client.util.Preconditions
						.checkNotNull(id,
								"Required parameter id must be specified.");
			}

			@Override
			public com.google.api.client.http.HttpResponse executeUsingHead()
					throws java.io.IOException {
				return super.executeUsingHead();
			}

			@Override
			public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead()
					throws java.io.IOException {
				return super.buildHttpRequestUsingHead();
			}

			@Override
			public GetRoomById setAlt(final java.lang.String alt) {
				return (GetRoomById) super.setAlt(alt);
			}

			@Override
			public GetRoomById setFields(final java.lang.String fields) {
				return (GetRoomById) super.setFields(fields);
			}

			@Override
			public GetRoomById setKey(final java.lang.String key) {
				return (GetRoomById) super.setKey(key);
			}

			@Override
			public GetRoomById setOauthToken(final java.lang.String oauthToken) {
				return (GetRoomById) super.setOauthToken(oauthToken);
			}

			@Override
			public GetRoomById setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (GetRoomById) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public GetRoomById setQuotaUser(final java.lang.String quotaUser) {
				return (GetRoomById) super.setQuotaUser(quotaUser);
			}

			@Override
			public GetRoomById setUserIp(final java.lang.String userIp) {
				return (GetRoomById) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String id;

			/**

       */
			public java.lang.String getId() {
				return id;
			}

			public GetRoomById setId(final java.lang.String id) {
				this.id = id;
				return this;
			}

			@Override
			public GetRoomById set(final String parameterName,
					final Object value) {
				return (GetRoomById) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.registerAtRoom".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link RegisterAtRoom#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param reservationId
		 * @return the request
		 */
		public RegisterAtRoom registerAtRoom(
				final java.lang.String reservationId)
				throws java.io.IOException {
			final RegisterAtRoom result = new RegisterAtRoom(reservationId);
			initialize(result);
			return result;
		}

		public class RegisterAtRoom
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.ReturnStatus> {

			private static final String REST_PATH = "roommanagement/registerAtRoom";

			/**
			 * Create a request for the method "roommanagement.registerAtRoom".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link RegisterAtRoom#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link RegisterAtRoom#initialize(com.google.api.client.googleapis.services.Abstr actGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param reservationId
			 * @since 1.13
			 */
			protected RegisterAtRoom(final java.lang.String reservationId) {
				super(
						Smartmeetings.this,
						"POST",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.ReturnStatus.class);
				this.reservationId = com.google.api.client.util.Preconditions
						.checkNotNull(reservationId,
								"Required parameter reservationId must be specified.");
			}

			@Override
			public RegisterAtRoom setAlt(final java.lang.String alt) {
				return (RegisterAtRoom) super.setAlt(alt);
			}

			@Override
			public RegisterAtRoom setFields(final java.lang.String fields) {
				return (RegisterAtRoom) super.setFields(fields);
			}

			@Override
			public RegisterAtRoom setKey(final java.lang.String key) {
				return (RegisterAtRoom) super.setKey(key);
			}

			@Override
			public RegisterAtRoom setOauthToken(
					final java.lang.String oauthToken) {
				return (RegisterAtRoom) super.setOauthToken(oauthToken);
			}

			@Override
			public RegisterAtRoom setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (RegisterAtRoom) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public RegisterAtRoom setQuotaUser(final java.lang.String quotaUser) {
				return (RegisterAtRoom) super.setQuotaUser(quotaUser);
			}

			@Override
			public RegisterAtRoom setUserIp(final java.lang.String userIp) {
				return (RegisterAtRoom) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String reservationId;

			/**

       */
			public java.lang.String getReservationId() {
				return reservationId;
			}

			public RegisterAtRoom setReservationId(
					final java.lang.String reservationId) {
				this.reservationId = reservationId;
				return this;
			}

			@Override
			public RegisterAtRoom set(final String parameterName,
					final Object value) {
				return (RegisterAtRoom) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.removeReservation".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link RemoveReservation#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param reservationId
		 * @return the request
		 */
		public RemoveReservation removeReservation(
				final java.lang.String reservationId)
				throws java.io.IOException {
			final RemoveReservation result = new RemoveReservation(
					reservationId);
			initialize(result);
			return result;
		}

		public class RemoveReservation
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.ReturnStatus> {

			private static final String REST_PATH = "roommanagement/removeReservation";

			/**
			 * Create a request for the method
			 * "roommanagement.removeReservation".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link RemoveReservation#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link RemoveReservation#initialize(com.google.api.client.googleapis.services.Ab stractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param reservationId
			 * @since 1.13
			 */
			protected RemoveReservation(final java.lang.String reservationId) {
				super(
						Smartmeetings.this,
						"DELETE",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.ReturnStatus.class);
				this.reservationId = com.google.api.client.util.Preconditions
						.checkNotNull(reservationId,
								"Required parameter reservationId must be specified.");
			}

			@Override
			public RemoveReservation setAlt(final java.lang.String alt) {
				return (RemoveReservation) super.setAlt(alt);
			}

			@Override
			public RemoveReservation setFields(final java.lang.String fields) {
				return (RemoveReservation) super.setFields(fields);
			}

			@Override
			public RemoveReservation setKey(final java.lang.String key) {
				return (RemoveReservation) super.setKey(key);
			}

			@Override
			public RemoveReservation setOauthToken(
					final java.lang.String oauthToken) {
				return (RemoveReservation) super.setOauthToken(oauthToken);
			}

			@Override
			public RemoveReservation setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (RemoveReservation) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public RemoveReservation setQuotaUser(
					final java.lang.String quotaUser) {
				return (RemoveReservation) super.setQuotaUser(quotaUser);
			}

			@Override
			public RemoveReservation setUserIp(final java.lang.String userIp) {
				return (RemoveReservation) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String reservationId;

			/**

       */
			public java.lang.String getReservationId() {
				return reservationId;
			}

			public RemoveReservation setReservationId(
					final java.lang.String reservationId) {
				this.reservationId = reservationId;
				return this;
			}

			@Override
			public RemoveReservation set(final String parameterName,
					final Object value) {
				return (RemoveReservation) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.searchRoom".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link SearchRoom#execute()} method to invoke the remote operation.
		 * 
		 * @param content
		 *            the
		 *            {@link com.google.api.services.smartmeetings.model.RoomSearchCriteria}
		 * @return the request
		 */
		public SearchRoom searchRoom(
				final com.google.api.services.smartmeetings.model.RoomSearchCriteria content)
				throws java.io.IOException {
			final SearchRoom result = new SearchRoom(content);
			initialize(result);
			return result;
		}

		public class SearchRoom
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.RoomCollection> {

			private static final String REST_PATH = "roommanagement/searchRoom";

			/**
			 * Create a request for the method "roommanagement.searchRoom".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link SearchRoom#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link SearchRoom#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param content
			 *            the
			 *            {@link com.google.api.services.smartmeetings.model.RoomSearchCriteria}
			 * @since 1.13
			 */
			protected SearchRoom(
					final com.google.api.services.smartmeetings.model.RoomSearchCriteria content) {
				super(
						Smartmeetings.this,
						"POST",
						REST_PATH,
						content,
						com.google.api.services.smartmeetings.model.RoomCollection.class);
			}

			@Override
			public SearchRoom setAlt(final java.lang.String alt) {
				return (SearchRoom) super.setAlt(alt);
			}

			@Override
			public SearchRoom setFields(final java.lang.String fields) {
				return (SearchRoom) super.setFields(fields);
			}

			@Override
			public SearchRoom setKey(final java.lang.String key) {
				return (SearchRoom) super.setKey(key);
			}

			@Override
			public SearchRoom setOauthToken(final java.lang.String oauthToken) {
				return (SearchRoom) super.setOauthToken(oauthToken);
			}

			@Override
			public SearchRoom setPrettyPrint(final java.lang.Boolean prettyPrint) {
				return (SearchRoom) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public SearchRoom setQuotaUser(final java.lang.String quotaUser) {
				return (SearchRoom) super.setQuotaUser(quotaUser);
			}

			@Override
			public SearchRoom setUserIp(final java.lang.String userIp) {
				return (SearchRoom) super.setUserIp(userIp);
			}

			@Override
			public SearchRoom set(final String parameterName, final Object value) {
				return (SearchRoom) super.set(parameterName, value);
			}
		}

		/**
		 * Create a request for the method "roommanagement.unregisterFromRoom".
		 * 
		 * This request holds the parameters needed by the the smartmeetings
		 * server. After setting any optional parameters, call the
		 * {@link UnregisterFromRoom#execute()} method to invoke the remote
		 * operation.
		 * 
		 * @param reservationId
		 * @return the request
		 */
		public UnregisterFromRoom unregisterFromRoom(
				final java.lang.String reservationId)
				throws java.io.IOException {
			final UnregisterFromRoom result = new UnregisterFromRoom(
					reservationId);
			initialize(result);
			return result;
		}

		public class UnregisterFromRoom
				extends
				SmartmeetingsRequest<com.google.api.services.smartmeetings.model.ReturnStatus> {

			private static final String REST_PATH = "roommanagement/unregisterFromRoom";

			/**
			 * Create a request for the method
			 * "roommanagement.unregisterFromRoom".
			 * 
			 * This request holds the parameters needed by the the smartmeetings
			 * server. After setting any optional parameters, call the
			 * {@link UnregisterFromRoom#execute()} method to invoke the remote
			 * operation.
			 * <p>
			 * {@link UnregisterFromRoom#initialize(com.google.api.client.googleapis.services.A bstractGoogleClientRequest)}
			 * must be called to initialize this instance immediately after
			 * invoking the constructor.
			 * </p>
			 * 
			 * @param reservationId
			 * @since 1.13
			 */
			protected UnregisterFromRoom(final java.lang.String reservationId) {
				super(
						Smartmeetings.this,
						"POST",
						REST_PATH,
						null,
						com.google.api.services.smartmeetings.model.ReturnStatus.class);
				this.reservationId = com.google.api.client.util.Preconditions
						.checkNotNull(reservationId,
								"Required parameter reservationId must be specified.");
			}

			@Override
			public UnregisterFromRoom setAlt(final java.lang.String alt) {
				return (UnregisterFromRoom) super.setAlt(alt);
			}

			@Override
			public UnregisterFromRoom setFields(final java.lang.String fields) {
				return (UnregisterFromRoom) super.setFields(fields);
			}

			@Override
			public UnregisterFromRoom setKey(final java.lang.String key) {
				return (UnregisterFromRoom) super.setKey(key);
			}

			@Override
			public UnregisterFromRoom setOauthToken(
					final java.lang.String oauthToken) {
				return (UnregisterFromRoom) super.setOauthToken(oauthToken);
			}

			@Override
			public UnregisterFromRoom setPrettyPrint(
					final java.lang.Boolean prettyPrint) {
				return (UnregisterFromRoom) super.setPrettyPrint(prettyPrint);
			}

			@Override
			public UnregisterFromRoom setQuotaUser(
					final java.lang.String quotaUser) {
				return (UnregisterFromRoom) super.setQuotaUser(quotaUser);
			}

			@Override
			public UnregisterFromRoom setUserIp(final java.lang.String userIp) {
				return (UnregisterFromRoom) super.setUserIp(userIp);
			}

			@com.google.api.client.util.Key
			private java.lang.String reservationId;

			/**

       */
			public java.lang.String getReservationId() {
				return reservationId;
			}

			public UnregisterFromRoom setReservationId(
					final java.lang.String reservationId) {
				this.reservationId = reservationId;
				return this;
			}

			@Override
			public UnregisterFromRoom set(final String parameterName,
					final Object value) {
				return (UnregisterFromRoom) super.set(parameterName, value);
			}
		}

	}

	/**
	 * Builder for {@link Smartmeetings}.
	 * 
	 * <p>
	 * Implementation is not thread-safe.
	 * </p>
	 * 
	 * @since 1.3.0
	 */
	public static final class Builder
			extends
			com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

		/**
		 * Returns an instance of a new builder.
		 * 
		 * @param transport
		 *            HTTP transport, which should normally be:
		 *            <ul>
		 *            <li>Google App Engine:
		 *            {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}
		 *            </li>
		 *            <li>Android: {@code newCompatibleTransport} from
		 *            {@code com.google.api.client.extensions.android.http.AndroidHttp}
		 *            </li>
		 *            <li>Java:
		 *            {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
		 *            </li>
		 *            </ul>
		 * @param jsonFactory
		 *            JSON factory, which may be:
		 *            <ul>
		 *            <li>Jackson:
		 *            {@code com.google.api.client.json.jackson2.JacksonFactory}
		 *            </li>
		 *            <li>Google GSON:
		 *            {@code com.google.api.client.json.gson.GsonFactory}</li>
		 *            <li>Android Honeycomb or higher:
		 *            {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}
		 *            </li>
		 *            </ul>
		 * @param httpRequestInitializer
		 *            HTTP request initializer or {@code null} for none
		 * @since 1.7
		 */
		public Builder(
				final com.google.api.client.http.HttpTransport transport,
				final com.google.api.client.json.JsonFactory jsonFactory,
				final com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
			super(transport, jsonFactory, DEFAULT_ROOT_URL,
					DEFAULT_SERVICE_PATH, httpRequestInitializer, false);
		}

		/** Builds a new instance of {@link Smartmeetings}. */
		@Override
		public Smartmeetings build() {
			return new Smartmeetings(this);
		}

		@Override
		public Builder setRootUrl(final String rootUrl) {
			return (Builder) super.setRootUrl(rootUrl);
		}

		@Override
		public Builder setServicePath(final String servicePath) {
			return (Builder) super.setServicePath(servicePath);
		}

		@Override
		public Builder setHttpRequestInitializer(
				final com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
			return (Builder) super
					.setHttpRequestInitializer(httpRequestInitializer);
		}

		@Override
		public Builder setApplicationName(final String applicationName) {
			return (Builder) super.setApplicationName(applicationName);
		}

		@Override
		public Builder setSuppressPatternChecks(
				final boolean suppressPatternChecks) {
			return (Builder) super
					.setSuppressPatternChecks(suppressPatternChecks);
		}

		@Override
		public Builder setSuppressRequiredParameterChecks(
				final boolean suppressRequiredParameterChecks) {
			return (Builder) super
					.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
		}

		@Override
		public Builder setSuppressAllChecks(final boolean suppressAllChecks) {
			return (Builder) super.setSuppressAllChecks(suppressAllChecks);
		}

		/**
		 * Set the {@link SmartmeetingsRequestInitializer}.
		 * 
		 * @since 1.12
		 */
		public Builder setSmartmeetingsRequestInitializer(
				final SmartmeetingsRequestInitializer smartmeetingsRequestInitializer) {
			return (Builder) super
					.setGoogleClientRequestInitializer(smartmeetingsRequestInitializer);
		}

		@Override
		public Builder setGoogleClientRequestInitializer(
				final com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
			return (Builder) super
					.setGoogleClientRequestInitializer(googleClientRequestInitializer);
		}
	}
}
