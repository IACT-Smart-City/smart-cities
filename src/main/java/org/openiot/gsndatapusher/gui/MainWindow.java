/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.openiot.gsndatapusher.gui;

import org.openiot.gsndatapusher.tcplistener.TcpListenerSensorDummyPanel;
import org.openiot.gsndatapusher.singletontcplistener.SingletonTcpListenerSensorDummyPanel;
import java.awt.GridLayout;
import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import org.openiot.gsndatapusher.core.SensorManager;
import org.openiot.gsndatapusher.core.SensorState;
import org.openiot.gsndatapusher.serialization.SerializableSensorManager;

/**
 *
 * @author admin-jacoby
 */
public class MainWindow extends javax.swing.JFrame implements SensorRemoveListener {


    private static AbstractSensorDummyPanel[] sensorTypes = {new SingletonTcpListenerSensorDummyPanel(), new TcpListenerSensorDummyPanel()};
    private static final String DATA_FILE = "data.xml";

    private List<SensorManager<?,?>> managers = new ArrayList<>();
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        pnlConfigContainer.setLayout(new BoxLayout(pnlConfigContainer, BoxLayout.Y_AXIS));
        spnMultiplicity.setValue(1);
        for (AbstractSensorDummyPanel panel : sensorTypes) {
            tabsConfig.addTab(panel.getDisplayName(), panel);
        }
       deserialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        btnToggleConfig = new javax.swing.JToggleButton();
        pnlMenu = new javax.swing.JPanel();
        tabsConfig = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        edtGSNAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnAddSensor = new javax.swing.JButton();
        spnMultiplicity = new javax.swing.JSpinner();
        pnlConfigScrollPane = new javax.swing.JScrollPane();
        pnlConfigContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        btnToggleConfig.setFont(new java.awt.Font("Arial Black", 1, 16)); // NOI18N
        btnToggleConfig.setText("<");
        btnToggleConfig.setIconTextGap(0);
        btnToggleConfig.setMargin(new java.awt.Insets(2, 0, 2, 0));
        btnToggleConfig.setMaximumSize(new java.awt.Dimension(25, 35));
        btnToggleConfig.setMinimumSize(new java.awt.Dimension(18, 21));
        btnToggleConfig.setPreferredSize(new java.awt.Dimension(18, 40));
        btnToggleConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToggleConfigActionPerformed(evt);
            }
        });
        jPanel1.add(btnToggleConfig, java.awt.BorderLayout.LINE_START);

        pnlMenu.setLayout(new java.awt.BorderLayout());

        tabsConfig.setPreferredSize(new java.awt.Dimension(250, 5));
        pnlMenu.add(tabsConfig, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 2, 2, 2));
        java.awt.GridBagLayout jPanel3Layout = new java.awt.GridBagLayout();
        jPanel3Layout.columnWidths = new int[] {0, 5, 0};
        jPanel3Layout.rowHeights = new int[] {0, 5, 0, 5, 0};
        jPanel3.setLayout(jPanel3Layout);

        jLabel1.setText("GSN address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jLabel1, gridBagConstraints);

        edtGSNAddress.setText("http://localhost:22001");
        edtGSNAddress.setMinimumSize(new java.awt.Dimension(300, 20));
        edtGSNAddress.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(edtGSNAddress, gridBagConstraints);

        jLabel2.setText("multiplicity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel3.add(jLabel2, gridBagConstraints);

        btnAddSensor.setText("add sensor");
        btnAddSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSensorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(btnAddSensor, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 0, 25);
        jPanel3.add(spnMultiplicity, gridBagConstraints);

        pnlMenu.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel1.add(pnlMenu, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        pnlConfigScrollPane.setHorizontalScrollBar(null);

        pnlConfigContainer.setLayout(new java.awt.GridLayout(0, 1));
        pnlConfigScrollPane.setViewportView(pnlConfigContainer);

        getContentPane().add(pnlConfigScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnToggleConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToggleConfigActionPerformed
        pnlMenu.setVisible(!pnlMenu.isVisible());
        btnToggleConfig.setText(pnlMenu.isVisible() ? "<" : ">");
    }//GEN-LAST:event_btnToggleConfigActionPerformed

    private void btnAddSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSensorActionPerformed
        AbstractSensorDummyPanel sensorPanel = (AbstractSensorDummyPanel)tabsConfig.getSelectedComponent();
        int multiplicity = Integer.parseInt(spnMultiplicity.getValue().toString());
        SensorManager manager = sensorPanel.getSensorManager(multiplicity, edtGSNAddress.getText());
        managers.add(manager);
        pnlConfigContainer.add(new SensorManagerPanel(manager, this));
        pnlConfigContainer.updateUI();
    }//GEN-LAST:event_btnAddSensorActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        shutDownSensorManagers();
        serialize();
    }//GEN-LAST:event_formWindowClosing

    private void shutDownSensorManagers() {
        for (SensorManager manager : managers) {
            if (manager.getStatus().getState() ==SensorState.RUNNING) {
                try {
                    manager.stop().call();
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void deserialize() {
        try {
            XMLDecoder decoder = new XMLDecoder(
                    new FileInputStream(DATA_FILE)
            );
            Object o = decoder.readObject();
            decoder.close();
            List<SerializableSensorManager<?,?>> dataToRetore = (List<SerializableSensorManager<?,?>>)o;
            for (SerializableSensorManager data : dataToRetore) {
                SensorManager manager = data.asManager();
                managers.add(manager);
                pnlConfigContainer.add(new SensorManagerPanel(manager, this));
            }
            pnlConfigContainer.updateUI();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void serialize() {
        try {
            List<SerializableSensorManager<?,?>> dataToStore = new ArrayList<>();
            for(SensorManager<?,?> manager : managers) {
                dataToStore.add(new SerializableSensorManager<>(manager));
            }
            XMLEncoder encoder = new XMLEncoder(
                    new FileOutputStream(DATA_FILE)
            );
            encoder.writeObject(dataToStore);
            encoder.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSensor;
    private javax.swing.JToggleButton btnToggleConfig;
    private javax.swing.JTextField edtGSNAddress;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel pnlConfigContainer;
    private javax.swing.JScrollPane pnlConfigScrollPane;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JSpinner spnMultiplicity;
    private javax.swing.JTabbedPane tabsConfig;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onSensorRemove(SensorManager manager, SensorManagerPanel panel) {
        managers.remove(manager);
        pnlConfigContainer.remove(panel);
        pnlConfigContainer.updateUI();
    }
}
